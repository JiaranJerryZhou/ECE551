#include "map.h"
template<typename K, typename V>
class BSTMap : public Map<K, V>
{
 private:
  class Node
  {
   public:
    K key;
    V value;
    Node * left;
    Node * right;
    Node(const K & key, const V & value) : key(key), value(value), left(NULL), right(NULL){};
  };
  Node * root;

 public:
  BSTMap() : root(NULL){};

  Node * addHelper(Node * current, const K & key, const V & value) {
    if (current == NULL) {
      Node * ans = new Node(key, value);
      return ans;
    }
    if (key == current->key) {
      current->value = value;
    }
    else if (key < current->key) {
      Node * newleft = addHelper(current->left, key, value);
      current->left = newleft;
    }
    else {
      Node * newright = addHelper(current->right, key, value);
      current->right = newright;
    }
    return current;
  }

  virtual void add(const K & key, const V & value) { root = addHelper(root, key, value); }

  virtual const V & lookup(const K & key) const throw(std::invalid_argument) {
    Node * current = root;
    while (current != NULL) {
      if (key == current->key) {
        return current->value;
      }
      else if (key < current->key) {
        current = current->left;
      }
      else {
        current = current->right;
      }
    }
    throw std::invalid_argument("cannot find target key\n");
  }

  Node * removeHelper(Node * current, const K & key) {
    if (current->left == NULL) {
      Node * tmp = current->right;
      delete current;
      return tmp;
    }
    else if (current->right == NULL) {
      Node * tmp = current->left;
      delete current;
      return tmp;
    }
    else {
    }
  }
  Node * toDelete(Node * current, const K & key) {
    if (key == current->key) {
      return current;
    }
    else if (key < current->key) {
      return toDelete(current->left);
    }
    else {
      return toDelete(current->right);
    }
  }

  virtual void remove(const K & key) {
    Node * current = toDelete(root, key);
    if (current->left == NULL) {
      Node * tmp = current->right;
      delete current;
      return tmp;
    }
    else if (current->right == NULL) {
      Node * tmp = current->left;
      delete current;
      return tmp;
    }
    else {
      Node * tmp = current->left;
      while (tmp->right != NULL) {
        tmp = tmp->right;
      }
      current->key = tmp->key;
      current->value = tmp->value;
      delete tmp;
    }
  }

  void destroy(Node * current) {
    if (current != NULL) {
      destroy(current->left);
      destroy(current->right);
      delete current;
    }
  }

  virtual ~BSTMap() { destroy(root); }
};
